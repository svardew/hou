name: Cron cache check and rebuild
# https://docs.github.com/ja/actions/using-workflows/reusing-workflows
on:
  schedule:
    - cron: '24 15 * * *'  # Run once per day.
  workflow_dispatch:

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  linux-debcache:
    if: true
    runs-on: ubuntu-22.04 # fix version, not latest
    permissions:
      actions: write
      contents: write
    env:
      CACHEDIR: debcache
    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/vim
          path: vim
      - name: init
        shell: bash {0}
        run: |
          gh extension install actions/gh-actions-cache
          test -d ${{ env.CACHEDIR }} || mkdir ${{ env.CACHEDIR }}
          sudo touch /etc/apt/apt.conf.d/99githubworkflows
          echo 'Binary::apt::APT::Cache "/var/cache/apt";' | sudo tee -a /etc/apt/apt.conf.d/99githubworkflows
          echo 'Binary::apt::APT::Cache::Archives "archives";' | sudo tee -a /etc/apt/apt.conf.d/99githubworkflows
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CACHEDIR }}
          key: ${{ runner.os }}-debfiles
      - name: Copy deb cache into system cache dir
        continue-on-error: true # in case no deb files
        shell: bash {0}
        run: |
          echo '/** These restored deb files are copy into /var/cache/apt/archives  */'
          find ${{ env.CACHEDIR }} -type f -name '*.deb'
          sudo cp -n ${{ env.CACHEDIR }}/*.deb /var/cache/apt/archives/
          # cat ${{ env.CACHEDIR }}/SHA256SUMS | sort > ./SHA256SUMS-repocache
      - name: apt update
        run: |
          sudo dpkg --add-architecture i386
          echo 'add gcc,llvm repos. then update pakcage.bin once'
          # add repository
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          . /etc/lsb-release
          sudo add-apt-repository -y "deb http://apt.llvm.org/${DISTRIB_CODENAME}/ llvm-toolchain-${DISTRIB_CODENAME}-${{ env.CLANG_VER }} main"
          # update once
          sudo apt-get update
        env:
          GCC_VER: 13
          CLANG_VER: 18
      - name: apt upgrade --download
        run: |
          # system upgrade deb files
          sudo apt-get upgrade --download-only -y
      - name: apt install --download
        run: |
          # dependencies deb files
          PKGS=( \
            gettext \
            desktop-file-utils \
            libtool-bin \
          )
          PKGS+=( \
            autoconf \
            gdb \
            lcov \
            libcanberra-dev \
            python2-dev \
            python3-dev \
            cscope \
            libsodium-dev \
            attr \
            libattr1-dev
          )
          sudo apt-get install --download-only -y "${PKGS[@]}"
          # echo '/* list system cache file */'
          # find /var/cache/apt/archives -maxdepth 1 -type f -name '*.deb'
          # gcc, clang toolchains deb files
          sudo apt-get install --download-only -y gcc-${{ env.GCC_VER }}
          sudo apt-get install --download-only -y gcc-${{ env.GCC_VER }}:i386
          sudo apt-get install --download-only -y clang-${{ env.CLANG_VER }} llvm-${{ env.CLANG_VER }}
        env:
          GCC_VER: 13
          CLANG_VER: 18

      - name: copy apt cache into homedir
        shell: bash {0}
        run: |
          cp -n /var/cache/apt/archives/*.deb ./${{ env.CACHEDIR }}
          # cd ${{ env.CACHEDIR }}
          # sha256sum *.deb | sort > ../SHA256SUMS-current
      - name: Check cache
        if: false
        run: |
          echo current-SHA256 ${{ hashFiles('SHA256SUMS-current') }}
          echo repocache-SHA256 ${{ hashFiles('SHA256SUMS-repocache') }}
          if [ ${{ hashFiles('SHA256SUMS-current') == hashFiles('SHA256SUMS-repocache') }} = 'true' ]
          then echo '/* SHA256SUMS is same, keep Repository cache */'
          else echo '/* SHA256SUMS not equal. update Repository cache */'
          fi
      - name: FORCE Update repository cache (delete)
        if: true
        shell: bash {0}
        run: |
          if [ $(gh actions-cache list -R $REPO |cut -f1 |grep -c $KEY) ]; then
            gh actions-cache delete $KEY -R $REPO --confirm
          fi
          # find ${{ env.CACHEDIR }} -type f -name 'SHA256SUMS*' -exec rm \{\} \+
          # mv ./SHA256SUMS-current ${{ env.CACHEDIR }}/SHA256SUMS
        env:
          KEY: ${{ runner.os }}-debfiles
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: FORCE Update repository cache (save)
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CACHEDIR }}
          key: ${{ env.KEY }}
        env:
          KEY: ${{ runner.os }}-debfiles
          REPO: ${{ github.repository }}
      - name: Update repository cache (delete)
        if: false # ${{ hashFiles('SHA256SUMS-current') != hashFiles('SHA256SUMS-repocache') }}
        shell: bash {0}
        run: |
          if [ $(gh actions-cache list -R $REPO |cut -f1 |grep -c $KEY) ]; then
            gh actions-cache delete $KEY -R $REPO --confirm
          fi
          find ${{ env.CACHEDIR }} -type f -name 'SHA256SUMS*' -exec rm \{\} \+
          mv ./SHA256SUMS-current ${{ env.CACHEDIR }}/SHA256SUMS
        env:
          KEY: ${{ runner.os }}-debfiles
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update repository cache (save)
        if: false # ${{ hashFiles('SHA256SUMS-current') != hashFiles('SHA256SUMS-repocache') }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CACHEDIR }}
          key: ${{ env.KEY }}
        env:
          KEY: ${{ runner.os }}-debfiles
          REPO: ${{ github.repository }}

  windows:
    if: false
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    env:
      LUA_RELEASE: '5.4.2'
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-5.4.2_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-5.4.2_Win64_dllw6_lib.zip
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      SODIUM_VER: '1.0.19'
      SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable-msvc.zip
      SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable-mingw.tar.gz

    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/vim
          path: vim

      - name: init
        run: |
          test -d downloads || mkdir downloads
          test -d cache-x86 || mkdir cache-x86
          test -d cache-x64 || mkdir cache-x64
          touch MD5SUMS
          cat <<LINES > MD5SUMS
          25b07e2b5177a2f071f109f641f9e3e4  lua-5.4.2_Win32_dllw6_lib.zip
          132834e89206d893630410fa2192bd2a  lua-5.4.2_Win64_dllw6_lib.zip
          a0f941c53b8e509712eeca46104674c4  winpty-0.4.3-msvc2015.zip
          113f036c91f06a9fdb11186e3dce7d93  libsodium-1.0.19-stable-msvc.zip
          8867b0380daabd12ece3dbad73197e78  libsodium-1.0.19-stable-mingw.tar.gz
          LINES
          cat <<LINES > MD5SUMS-x86
          25b07e2b5177a2f071f109f641f9e3e4  lua.zip
          a0f941c53b8e509712eeca46104674c4  winpty.zip
          113f036c91f06a9fdb11186e3dce7d93  libsodium.zip
          8867b0380daabd12ece3dbad73197e78  libsodium.tar.gz
          LINES
          cat <<LINES > MD5SUMS-x64
          132834e89206d893630410fa2192bd2a  lua.zip
          a0f941c53b8e509712eeca46104674c4  winpty.zip
          113f036c91f06a9fdb11186e3dce7d93  libsodium.zip
          8867b0380daabd12ece3dbad73197e78  libsodium.tar.gz
          LINES

      - name: Key file (list of download URLs)
        run: |
          touch urls.txt && truncate --size 0 urls.txt
          echo ${{ env.LUA_RELEASE }} >> urls.txt
          echo ${{ env.WINPTY_URL }}  >> urls.txt
          echo ${{ env.SODIUM_VER }}  >> urls.txt
          sed -i 's/$/\r/g' urls.txt

      # x86
      - name: ${{ env.arc }} Restore Cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: downloads
          key: Windows-x86-${{ hashFiles('urls.txt') }}
        env:
          arc: x86

      - name: ${{ env.arc }} Verify cache
        id: verifycache86
        continue-on-error: true
        shell: bash {0}
        run: |
          find downloads -type f -exec mv \{\} ./cache-x86 \;
          cd cache-x86
          md5sum -c ../MD5SUMS-x86
          if [ $? -gt 0 ]; then
            echo "cache=invalid" >> $GITHUB_OUTPUT
          fi
        env:
          arc: x86

      - name: ${{ env.arc }} Download missing dependencies
        if: ${{ steps.verifycache86.outputs.cache == 'invalid' }}
        run: |
          function dlf2 () {
            if [ ! -f "$2" ]
            then wget -nv --tries=2 --waitretry=10 -O $2 $1
            else echo Skip Downlaod. $2
            fi
          }
          cd cache-x86
          dlf2 ${{ env.LUA32_URL }}        lua.zip
          dlf2 ${{ env.WINPTY_URL }}       winpty.zip
          dlf2 ${{ env.SODIUM_MSVC_URL }}  libsodium.zip
          dlf2 ${{ env.SODIUM_MINGW_URL }} libsodium.tar.gz
          echo '// check md5sum'
          md5sum -c ../MD5SUMS-x86
        env:
          arc: x86

      # x64
      - name: ${{ env.arc }} Restore Cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: downloads
          key: Windows-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          arc: x64

      - name: ${{ env.arc }} Verify cache
        id: verifycache64
        continue-on-error: true
        shell: bash {0}
        run: |
          find downloads -type f -exec mv \{\} ./cache-x64 \;
          cd cache-x64
          md5sum -c ../MD5SUMS-x64
          if [ $? -gt 0 ]; then
            echo "cache=invalid" >> $GITHUB_OUTPUT
          fi
        env:
          arc: x64

      - name: ${{ env.arc }} Download missing dependencies
        if: ${{ steps.verifycache64.outputs.cache == 'invalid' }}
        run: |
          function dlf2 () {
            if [ ! -f "$2" ]
            then wget -nv --tries=2 --waitretry=10 -O $2 $1
            else echo Skip Downlaod. $2
            fi
          }
          cd cache-x64
          dlf2 ${{ env.LUA64_URL }}        lua.zip
          dlf2 ${{ env.WINPTY_URL }}       winpty.zip
          dlf2 ${{ env.SODIUM_MSVC_URL }}  libsodium.zip
          dlf2 ${{ env.SODIUM_MINGW_URL }} libsodium.tar.gz
          echo '// check md5sum'
          md5sum -c ../MD5SUMS-x64
        env:
          arc: x64

      - name: List cache
        shell: bash {0}
        run: |
          gh extension install actions/gh-actions-cache
          echo "/* List of repository cache */"
          gh actions-cache list -R $REPO -L 100 | cut -f 1
          echo "/* Local dependencies */"
          echo '--- 'downloads && ls -lagG downloads
          echo '--- 'cache-x86 && ls -lagG cache-x86
          echo '--- 'cache-x64 && ls -lagG cache-x64
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # x86
      - name: ${{ env.arc }} Copy dependencies to downloads
        if: ${{ steps.verifycache86.outputs.cache == 'invalid' }}
        run: |
          find downloads -type f -exec rm \{\} \+
          cp cache-x86/* ./downloads/
        env:
          arc: x86

      - name: ${{ env.arc }} Delete repository cache
        if: ${{ steps.verifycache86.outputs.cache == 'invalid' }}
        shell: bash {0}
        run: |
          caches=$(gh actions-cache list -R ${{ env.REPO }} | cut -f1)
          for ky in $caches
          do
            if [ "$ky" = "${{ env.KEY }}" ];then
              echo "repository cache exist. delete cache" ${{ env.KEY }}
              gh actions-cache delete ${{ env.KEY }} -R ${{ env.REPO }} --confirm
            fi
          done
        env:
          KEY: Windows-x86-${{ hashFiles('urls.txt') }}
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          arc: x86

      - name: ${{ env.arc }} Save cache
        if: ${{ steps.verifycache86.outputs.cache == 'invalid' }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          enableCrossOsArchive: true
          key: Windows-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          arc: x86

      # x64
      - name: ${{ env.arc }} Copy dependencies to downloads
        if: ${{ steps.verifycache64.outputs.cache == 'invalid' }}
        run: |
          find downloads -type f -exec rm \{\} \+
          cp cache-x64/* ./downloads/
        env:
          arc: x64

      - name: ${{ env.arc }} Delete repository cache
        if: ${{ steps.verifycache64.outputs.cache == 'invalid' }}
        run: |
          caches=$(gh actions-cache list -R ${{ env.REPO }} | cut -f1)
          for ky in $caches
          do
            if [ "$ky" = "${{ env.KEY }}" ];then
              echo "repository cache exist. delete cache" ${{ env.KEY }}
              gh actions-cache delete ${{ env.KEY }} -R ${{ env.REPO }} --confirm
            fi
          done
        env:
          KEY: Windows-x64-${{ hashFiles('urls.txt') }}
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          arc: x64

      - name: ${{ env.arc }} Save cache
        if: ${{ steps.verifycache64.outputs.cache == 'invalid' }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          enableCrossOsArchive: true
          key: Windows-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          arc: x64

      - name: finish job
        run: exit 0

