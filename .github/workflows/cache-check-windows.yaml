name: Cache check windows

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runid:
        required: true
        type: string
    outputs:
      restore-key:
        description: "use this KEY for cache, Windows-{arch}-KEY"
        value: ${{ jobs.windows-cache.outputs.restore-key }}

concurrency:
  # The concurrency group contains the workflow name and the branch name for
  # pull requests or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  windows-cache:
    runs-on: ubuntu-latest
    env:
      # Lua
      LUA_VER: 54
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: 5.4.2
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-msvc.zip
      SODIUM_MSVC_VER: v143
      SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-mingw.tar.gz
      SODIUM_MINGW_VER: 26
    outputs:
      restore-key: ${{ steps.validkey.outputs.restore-key }}

    steps:
      - name: Initialize
        id: init
        shell: bash {0}
        run: |
          # url, filename
          ver=${{ env.LUA_RELEASE }}
          url=${{ env.LUA32_URL }}
          url=${url/\%LUA_RELEASE\%/$ver}
          f=$(basename $url)
          echo "LUA32_URL=$url" >> $GITHUB_OUTPUT
          echo "LUA32_FILE=$f" >> $GITHUB_OUTPUT
          url=${{ env.LUA64_URL }}
          url=${url/\%LUA_RELEASE\%/$ver}
          f=$(basename $url)
          echo "LUA64_URL=$url" >> $GITHUB_OUTPUT
          echo "LUA64_FILE=$f" >> $GITHUB_OUTPUT
          ver=${{ env.SODIUM_VER }}
          url=${{ env.SODIUM_MSVC_URL }}
          url=${url/\%SODIUM_VER\%/$ver}
          f=$(basename $url)
          echo "SODIUM_MSVC_URL=$url" >> $GITHUB_OUTPUT
          echo "SODIUM_MSVC_FILE=$f" >> $GITHUB_OUTPUT
          url=${{ env.SODIUM_MINGW_URL }}
          url=${url/\%SODIUM_VER\%/$ver}
          f=$(basename $url)
          echo "SODIUM_MINGW_URL=$url" >> $GITHUB_OUTPUT
          echo "SODIUM_MINGW_FILE=$f" >> $GITHUB_OUTPUT
          url=${{ env.WINPTY_URL }}
          f=$(basename $url)
          echo "WINPTY_URL=$url" >> $GITHUB_OUTPUT
          echo "WINPTY_FILE=$f" >> $GITHUB_OUTPUT
          # checksum
          touch MD5SUMS
          cat <<EOM > MD5SUMS
          25b07e2b5177a2f071f109f641f9e3e4  lua-5.4.2_Win32_dllw6_lib.zip
          132834e89206d893630410fa2192bd2a  lua-5.4.2_Win64_dllw6_lib.zip
          a0f941c53b8e509712eeca46104674c4  winpty-0.4.3-msvc2015.zip
          113f036c91f06a9fdb11186e3dce7d93  libsodium-1.0.19-stable-msvc.zip
          8867b0380daabd12ece3dbad73197e78  libsodium-1.0.19-stable-mingw.tar.gz
          EOM

      - name: Key file (list of download URLs)
        run: |
          touch urls.txt
          echo ${{ env.LUA_RELEASE }} >> urls.txt
          echo ${{ env.WINPTY_URL }}  >> urls.txt
          echo ${{ env.SODIUM_VER }}  >> urls.txt
          sed -i 's/$/\r/g' urls.txt
          test -d downloads || mkdir downloads

      - name: Restore Cache
        id: restorecache
        uses: actions/cache/restore@v4
        with:
          path: downloads
          key: ${{ runner.os }}-runid_${{ inputs.runid }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('urls.txt') }}
            ${{ runner.os }}-runid_

      - name: Verify cache
        id: verifycache
        continue-on-error: true
        shell: bash {0}
        run: |
          # restored from ${{ steps.restorecache.outputs.cache-matched-key }}
          cd downloads
          md5sum -c ../MD5SUMS
          flag=$?
          if [ $flag -gt 0 ]; then
            echo "cache status: invalid "$?
            echo "FLAG=invalid" >> $GITHUB_OUTPUT
          else
            echo "cache status: valid"
            echo "FLAG=valid" >> $GITHUB_OUTPUT
            echo "KEY=$restorecache_matched_key" >> $GITHUB_OUTPUT
          fi
        env:
          restorecache_matched_key: ${{ steps.restorecache.outputs.cache-matched-key }}

      - name: Download dependencies
        if: ${{ steps.verifycache.outputs.FLAG == 'invalid' }}
        run: |
          test -d downloads || mkdir downloads
          dlf2 () {
            if [ -f downloads/$2 ]; then
              echo Skip Downlaod. $2
            else
              wget -nv --tries=2 --waitretry=10 -O ./downloads/$2 $1
            fi
          }
          dlf2 ${{ steps.init.outputs.LUA32_URL }}        ${{ steps.init.outputs.LUA32_FILE }}
          dlf2 ${{ steps.init.outputs.LUA64_URL }}        ${{ steps.init.outputs.LUA64_FILE }}
          dlf2 ${{ steps.init.outputs.WINPTY_URL }}       ${{ steps.init.outputs.WINPTY_FILE }}
          dlf2 ${{ steps.init.outputs.SODIUM_MSVC_URL }}  ${{ steps.init.outputs.SODIUM_MSVC_FILE }}
          dlf2 ${{ steps.init.outputs.SODIUM_MINGW_URL }} ${{ steps.init.outputs.SODIUM_MINGW_FILE }}
          ls -lagG downloads

      - name: Verify downloaded dependencies
        if: ${{ steps.verifycache.outputs.FLAG == 'invalid' }}
        id: verifydownloads
        continue-on-error: true
        run: |
          cd downloads
          md5sum -c ../MD5SUMS
          flag=$?
          if [ $flag -gt 0 ]; then
            echo "cache status: invalid "$?
            echo "FLAG=invalid" >> $GITHUB_OUTPUT
          else
            echo "cache status: valid"
            echo "FLAG=valid" >> $GITHUB_OUTPUT
            # validkey=${{ runner.os }}-runid_${{ inputs.runid }}
            # ^^^ caller runid expect, but workflow_dispatch:
            echo "KEY=$savenewcachekey" >> $GITHUB_OUTPUT
          fi
        env:
          savenewcachekey: ${{ runner.os }}-runid_${{ github.run_id }}

      - name: Save cache
        if: ${{ steps.verifydownloads.outputs.FLAG == 'valid' }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          key: ${{ steps.verifydownloads.outputs.KEY }}
          enableCrossOsArchive: true

      - name: return valid KEY
        id: validkey
        run: |
          if [ $restorecacheflag == 'valid' ]; then
            echo "restore-key=$restorecache_key" >> $GITHUB_OUTPUT
          elif [ $savenewcacheflag == 'valid' ]; then
            echo "restore-key=$savenewcache_key" >> $GITHUB_OUTPUT
          fi
        env:
          restorecacheflag: ${{ steps.verifycache.outputs.FLAG }}
          savenewcacheflag: ${{ steps.verifydownloads.outputs.FLAG }}
          restorecache_key: ${{ steps.verifycache.outputs.KEY }}
          savenewcache_key: ${{ steps.verifydownloads.outputs.KEY }}


