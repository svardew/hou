name: windows (HUGE, mingw, yes, yes, x86, stable, yes) fail vim test

on:
  workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for
  # pull requests or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  cache-windows:
    runs-on: ubuntu-22.04
    env:
      # Lua
      LUA_RELEASE: '5.4.2'
      LUA32_FILE: lua-5.4.2_Win32_dllw6_lib.zip
      LUA64_FILE: lua-5.4.2_Win64_dllw6_lib.zip
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-5.4.2_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-5.4.2_Win64_dllw6_lib.zip
      # winpty
      WINPTY_FILE: winpty-0.4.3-msvc2015.zip
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      SODIUM_MSVC_FILE: libsodium-1.0.19-stable-msvc.zip
      SODIUM_MINGW_FILE: libsodium-1.0.19-stable-mingw.tar.gz
      SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable-msvc.zip
      SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-1.0.19-stable-mingw.tar.gz
    outputs:
      restore-key: ${{ steps.validkey.outputs.restore-key }}
    steps:
      - name: Init. keyfile, savedir, checksum, url, filename
        id: init
        run: |
          # Create a list of download URLs
          touch urls.txt
          truncate --size 0 urls.txt
          echo $LUA_RELEASE >> urls.txt
          echo $WINPTY_URL >> urls.txt
          echo $SODIUM_VER >> urls.txt
          sed -i 's/$/\r/g' urls.txt
          file urls.txt
          test -d downloads || mkdir downloads
          cat <<LINES > MD5SUMS
          25b07e2b5177a2f071f109f641f9e3e4  ${{ env.LUA32_FILE }}
          132834e89206d893630410fa2192bd2a  ${{ env.LUA64_FILE }}
          a0f941c53b8e509712eeca46104674c4  ${{ env.WINPTY_FILE }}
          113f036c91f06a9fdb11186e3dce7d93  ${{ env.SODIUM_MSVC_FILE }}
          8867b0380daabd12ece3dbad73197e78  ${{ env.SODIUM_MINGW_FILE }}
          LINES
      - name: Restore cache
        id: restorecache
        uses: actions/cache/restore@v4
        with:
          path: downloads
          enableCrossOsArchive: true
          # restore from default cache, or latest other user saved cache.
          # - Windows-all-${{ hashFile('urls.txt') }}
          # - Windows-all-runid_0011223399
          # fetch and save cache if restored files are not valid
          # saved cache is used jobs.windows, and reused by other user.
          # this saved cache live 7 days.
          # - Windows-all-runid_${{ github.run_id }}
          key: Windows-all-runid_${{ github.run_id }}
          restore-keys: |
            Windows-all-${{ hashFiles('urls.txt') }}
            Windows-all-runid_
      - name: Check cache
        id: checkcache
        continue-on-error: true
        shell: bash {0}
        run: |
          cd downloads
          md5sum -c ../MD5SUMS
          if [ $? -gt 0 ]; then
            echo "/* cache status: invalid */"
            echo "KEY=" >> $GITHUB_OUTPUT
          else
            echo "/* cache status: valid */"
            echo "KEY=${{ env.restorecache_matched_key }}" >> $GITHUB_OUTPUT
          fi
        env:
          restorecache_matched_key: ${{ steps.restorecache.outputs.cache-matched-key }}
      - name: Fetch missing dependencies
        id: fetchfiles
        if: ${{ ! contains(steps.checkcache.outputs.KEY, '-') }}
        run: |
          test -d downloads || mkdir downloads
          wgettries2 () {
            if [ ! -f "downloads/$2" ]; then
              wget -nv --tries=2 --waitretry=10 -O ./downloads/$2 $1
            else
              echo Skip Downlaod. $2
            fi
          }
          wgettries2 ${{ env.LUA32_URL }}        ${{ env.LUA32_FILE }}
          wgettries2 ${{ env.LUA64_URL }}        ${{ env.LUA64_FILE }}
          wgettries2 ${{ env.WINPTY_URL }}       ${{ env.WINPTY_FILE }}
          wgettries2 ${{ env.SODIUM_MSVC_URL }}  ${{ env.SODIUM_MSVC_FILE }}
          wgettries2 ${{ env.SODIUM_MINGW_URL }} ${{ env.SODIUM_MINGW_FILE }}
          ls -lagG downloads
          echo "KEY=${{ env.newcachekey }}" >> $GITHUB_OUTPUT
          echo "/* verify checksum */"
          cd downloads
          md5sum -c ../MD5SUMS
        env:
          newcachekey: Windows-all-runid_${{ github.run_id }}
      - name: Save cache
        if: ${{ steps.fetchfiles.conclusion == 'success' }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          key: ${{ env.restorekey }}
          enableCrossOsArchive: true
        env:
          restorekey: ${{ steps.fetchfiles.outputs.KEY }}
      - name: Set job outputs restore-key
        id: validkey
        run: |
          echo foo
          if [ -n "${{ env.restoredcache_key }}" ]; then
            echo "restore-key=${{ env.restoredcache_key }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ env.newcache_key }}" ]; then
            echo "restore-key=${{ env.newcache_key }}" >> $GITHUB_OUTPUT
          fi
        env:
          restoredcache_key: ${{ steps.checkcache.outputs.KEY }}
          newcache_key: ${{ steps.fetchfiles.outputs.KEY }}
      - name: report
        run: |
          echo "jobs.windows use this restore-key"
          echo ${{ steps.validkey.outputs.restore-key }}
          echo "/* repository caches */"
          echo "default:" Windows-all-${{ hashFiles('urls.txt') }}
          echo "restored:" ${{ steps.restorecache.outputs.cache-matched-key }}
          echo "new saved:" ${{ steps.fetchfiles.outputs.KEY }}

  windows:
    runs-on: windows-2022
    needs: [cache-windows] # ${{ needs.cache-windows.outputs.restore-key }}
    if: true
    env:
      # Interfaces
      # Lua
      LUA_VER: 54
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: 5.4.2
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      LUA_DIR: D:\Lua
      # do not want \L to end up in pathdef.c and compiler complaining about unknown escape sequences \l
      LUA_DIR_SLASH: D:/Lua
      # Python 2
      PYTHON_VER: 27
      PYTHON_VER_DOT: '2.7'
      PYTHON_DIR: 'C:\Python27'
      # Python 3
      PYTHON3_VER: 311
      PYTHON3_VER_DOT: '3.11'
      # Other dependencies
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-msvc.zip
      SODIUM_MSVC_VER: v143
      SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-mingw.tar.gz
      SODIUM_MINGW_VER: 26
      # Escape sequences
      COL_RED: "\x1b[31m"
      COL_GREEN: "\x1b[32m"
      COL_YELLOW: "\x1b[33m"
      COL_RESET: "\x1b[m"

    strategy:
      fail-fast: false
      matrix:
        include:
          # { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: no,  arch: x64, python3: stable }
          - { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: yes, arch: x86, python3: stable, coverage: yes }
          # { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: yes, arch: x86 }
          # { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: no,  arch: x64, coverage: yes }
          # { features: NORMAL, toolchain: msvc,  VIMDLL: yes, GUI: no,  arch: x86 }
          # { features: NORMAL, toolchain: mingw, VIMDLL: no,  GUI: yes, arch: x64 }
          # { features: TINY,   toolchain: msvc,  VIMDLL: yes, GUI: yes, arch: x64 }
          # { features: TINY,   toolchain: mingw, VIMDLL: no,  GUI: no,  arch: x86 }

    steps:
      - name: Initialize
        id: init
        shell: bash
        run: |
          # Show Windows version
          cmd /c ver

          git config --global core.autocrlf input

          if ${{ matrix.arch == 'x64' }}; then
            cygreg=registry
            pyreg=
            echo "VCARCH=amd64" >> $GITHUB_ENV
            echo "WARCH=x64" >> $GITHUB_ENV
            echo "BITS=64" >> $GITHUB_ENV
            echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
          else
            cygreg=registry32
            pyreg=-32
            echo "VCARCH=x86" >> $GITHUB_ENV
            echo "WARCH=ia32" >> $GITHUB_ENV
            echo "BITS=32" >> $GITHUB_ENV
            echo "MSYSTEM=MINGW32" >> $GITHUB_ENV
          fi

          echo "VCVARSALL=$(vswhere -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          if ${{ matrix.features != 'TINY' }}; then
            if ${{ matrix.arch == 'x86' }}; then
              choco install python2 --no-progress --forcex86
            else
              choco install python2 --no-progress
            fi
          fi
          python3_dir=$(cat "/proc/$cygreg/HKEY_LOCAL_MACHINE/SOFTWARE/Python/PythonCore/${PYTHON3_VER_DOT}$pyreg/InstallPath/@")
          echo "PYTHON3_DIR=$python3_dir" >> $GITHUB_ENV

          if ${{ matrix.toolchain == 'msvc' }}; then
            SODIUM_DIR=D:\\libsodium
            echo "SODIUM_LIB=${SODIUM_DIR}\\${{ matrix.arch == 'x64' && 'x64' || 'Win32' }}\\Release\\${SODIUM_MSVC_VER}\\dynamic" >> $GITHUB_ENV
          else
            SODIUM_DIR=D:\\libsodium-win${{ matrix.arch == 'x64' && '64' || '32' }}
            # do not want \L to end up in pathdef.c and compiler complaining about unknown escape sequences \l
            SODIUM_DIR_SLASH=D:/libsodium-win${{ matrix.arch == 'x64' && '64' || '32' }}
            echo "SODIUM_LIB=${SODIUM_DIR}\\bin" >> $GITHUB_ENV
            echo "SODIUM_DIR_SLASH=${SODIUM_DIR_SLASH}" >> $GITHUB_ENV
          fi
          echo "SODIUM_DIR=${SODIUM_DIR}" >> $GITHUB_ENV

      - uses: msys2/setup-msys2@v2
        if: matrix.toolchain == 'mingw'
        with:
          update: true
          install: tar
          pacboy: >-
            make:p gcc:p
          msystem: ${{ env.MSYSTEM }}
          release: false

      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: svardew/vim
          ref: c207fd2535717030d78f9b92839e5f2ac004cc78
          # ^^ patch 9.0.0002 2022-06-09
          # ref: 592f57f5fec1064cc276a0d7992cc543bed04fd5
          # ^^ patch 8.2.2630 2021-03-20
          # ref: 5bc13453b2dd8067597793e32c4f94aa3031054a
          # ^^ patch 9.0.0421 2022-09-09

      - name: Create a list of download URLs
        shell: cmd
        run: |
          type NUL > urls.txt
          echo %LUA_RELEASE%>> urls.txt
          echo %WINPTY_URL%>> urls.txt
          echo %SODIUM_VER%>> urls.txt
          echo next step restroe cache from ${{ needs.cache-windows.outputs.restore-key }}

      - name: Restore Cache downloaded files
        id: restorecache
        uses: actions/cache/restore@v4
        with:
          path: downloads
          enableCrossOsArchive: true
          key: ${{ env.verifiedkey }}
          restore-keys: |
            Windows-all-${{ hashFiles('urls.txt') }}
            Windows-all-runid_
        env:
          verifiedkey: ${{ needs.cache-windows.outputs.restore-key }}

      - name: Rename cache files
        shell: bash {0}
        run: |
          cd downloads
          function my_rename () {
            orig=$(basename $1)
            pat=$3
            str=$4
            orig=${orig/$pat/$str}
            test -f $2 || mv -vn $orig $2
          }
          luaurl=${{ matrix.arch == 'x64' && env.LUA64_URL || env.LUA32_URL }}
          my_rename $luaurl lua.zip '\%LUA_RELEASE\%' ${{ env.LUA_RELEASE }}
          my_rename ${{ env.WINPTY_URL }} winpty.zip '#DUMMY' '#DUMMY'
          my_rename ${{ env.SODIUM_MSVC_URL }} libsodium.zip '\%SODIUM_VER\%' ${{ env.SODIUM_VER }}
          my_rename ${{ env.SODIUM_MINGW_URL }} libsodium.tar.gz '\%SODIUM_VER\%' ${{ env.SODIUM_VER }}
          cd ../
          echo '/* files in downloads */'
          ls -lagG downloads

      - name: Download dependencies
        shell: cmd
        run: |
          if not exist downloads mkdir downloads

          echo %COL_GREEN%Download Lua%COL_RESET%
          call :downloadfile %LUA${{ env.BITS }}_URL% downloads\lua.zip

          echo %COL_GREEN%Download winpty%COL_RESET%
          call :downloadfile %WINPTY_URL% downloads\winpty.zip

          echo %COL_GREEN%Download libsodium%COL_RESET%
          if "${{ matrix.toolchain }}"=="msvc" (
            call :downloadfile %SODIUM_MSVC_URL% downloads\libsodium.zip
          ) else (
            call :downloadfile %SODIUM_MINGW_URL% downloads\libsodium.tar.gz
          )

          goto :eof

          :downloadfile
          :: call :downloadfile <URL> <localfile>
          if not exist %2 (
            curl -f -L %1 -o %2
          ) else (
            echo Skip %2
          )
          if ERRORLEVEL 1 (
            rem Retry once.
            curl -f -L %1 -o %2 || exit 1
          )
          goto :eof

      - name: Install dependencies
        shell: cmd
        run: |
          path C:\Program Files\7-Zip;%path%
          7z x downloads\lua.zip -o%LUA_DIR% > nul || exit 1
          7z x -y downloads\winpty.zip -oD:\winpty > nul || exit 1
          copy /Y D:\winpty\%WARCH%\bin\winpty.dll        src\winpty%BITS%.dll
          copy /Y D:\winpty\%WARCH%\bin\winpty-agent.exe  src\
          if "${{ matrix.toolchain }}"=="msvc" (
            7z x -y downloads\libsodium.zip -oD:\ > nul || exit 1
          ) else (
            7z x -y downloads\libsodium.tar.gz -so | 7z x -si -ttar -oD:\ > nul || exit 1
            mklink %SODIUM_LIB%\libsodium.dll %SODIUM_LIB%\libsodium-%SODIUM_MINGW_VER%.dll
          )


      - name: Build (MSVC)
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          call "%VCVARSALL%" %VCARCH%
          cd src
          if "${{ matrix.VIMDLL }}"=="yes" (
            set GUI=yes
          ) else (
            set GUI=${{ matrix.GUI }}
          )
          if "${{ matrix.python3 }}"=="stable" (
            set PYTHON3_STABLE=yes
          ) else (
            set PYTHON3_STABLE=no
          )
          if "${{ matrix.features }}"=="HUGE" (
            nmake -nologo -f Make_mvc.mak ^
              FEATURES=${{ matrix.features }} ^
              GUI=%GUI% IME=yes ICONV=yes VIMDLL=${{ matrix.VIMDLL }} ^
              DYNAMIC_LUA=yes LUA=%LUA_DIR% ^
              DYNAMIC_PYTHON=yes PYTHON=%PYTHON_DIR% ^
              DYNAMIC_PYTHON3=yes PYTHON3=%PYTHON3_DIR% ^
              DYNAMIC_PYTHON3_STABLE_ABI=%PYTHON3_STABLE% ^
              DYNAMIC_SODIUM=yes SODIUM=%SODIUM_DIR%
          ) else (
            nmake -nologo -f Make_mvc.mak ^
              FEATURES=${{ matrix.features }} ^
              GUI=%GUI% IME=yes ICONV=yes VIMDLL=${{ matrix.VIMDLL }}
          )

      - name: Build (MinGW)
        if: matrix.toolchain == 'mingw'
        shell: msys2 {0}
        run: |
          cd src
          if [ "${{ matrix.VIMDLL }}" = "yes" ]; then
            GUI=yes
          else
            GUI=${{ matrix.GUI }}
          fi
          if [ "${{ matrix.python3 }}" = "stable" ]; then
            PYTHON3_STABLE=yes
          else
            PYTHON3_STABLE=no
          fi
          if [ "${{ matrix.features }}" = "HUGE" ]; then
            mingw32-make -f Make_ming.mak -j2 \
              FEATURES=${{ matrix.features }} \
              GUI=$GUI IME=yes ICONV=yes VIMDLL=${{ matrix.VIMDLL }} \
              DYNAMIC_LUA=yes LUA=${LUA_DIR_SLASH} \
              DYNAMIC_PYTHON=yes PYTHON=${PYTHON_DIR} \
              DYNAMIC_PYTHON3=yes PYTHON3=${PYTHON3_DIR} \
              DYNAMIC_PYTHON3_STABLE_ABI=${PYTHON3_STABLE} \
              DYNAMIC_SODIUM=yes SODIUM=${SODIUM_DIR_SLASH} \
              STATIC_STDCPLUS=yes COVERAGE=${{ matrix.coverage }}
          else
            mingw32-make -f Make_ming.mak -j2 \
              FEATURES=${{ matrix.features }} \
              GUI=$GUI IME=yes ICONV=yes VIMDLL=${{ matrix.VIMDLL }} \
              STATIC_STDCPLUS=yes
          fi

      - name: Check version
        shell: cmd
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%
          if "${{ matrix.GUI }}"=="yes" (
            start /wait src\gvim -u NONE -i NONE -c "redir > version.txt | ver | q" || exit 1
            type version.txt
            echo.
            start /wait src\gvim -u NONE -i NONE -c "redir! > version.txt | so ci\if_ver-1.vim | q"
            start /wait src\gvim -u NONE -i NONE -c "redir >> version.txt | so ci\if_ver-2.vim | q"
            type version.txt
            del version.txt
          ) else (
            src\vim --version || exit 1
            src\vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-1.vim -c quit
            src\vim -u NONE -i NONE --not-a-term -esNX -V1 -S ci/if_ver-2.vim -c quit
          )

      #- name: Prepare Artifact
      #  shell: cmd
      #  run: |
      #    mkdir artifacts
      #    copy src\*vim.exe artifacts
      #    copy src\vim*.dll artifacts
      #
      #- name: Upload Artifact
      #  uses: actions/upload-artifact@v1
      #  with:
      #    name: vim${{ matrix.bits }}-${{ matrix.toolchain }}
      #    path: ./artifacts

      - name: Test and show the result of testing gVim
        if: matrix.GUI == 'yes' || matrix.VIMDLL == 'yes'
        shell: cmd
        timeout-minutes: 15
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%;%SODIUM_LIB%
          call "%VCVARSALL%" %VCARCH%

          echo %COL_GREEN%Test gVim:%COL_RESET%
          cd src\testdir
          if "${{ matrix.GUI }}"=="yes" (
            nmake -nologo -f Make_mvc.mak VIMPROG=..\gvim || exit 1
          ) else (
            @rem Run only tiny tests.
            nmake -nologo -f Make_mvc.mak tiny VIMPROG=..\gvim  || exit 1
          )

      - name: __modify_file_ Make_mvc.mak
        if: matrix.GUI == 'no' || matrix.VIMDLL == 'yes'
        shell: bash
        run: |
          echo 'patch: each oldstyle testing vim, show current dir files'
          sed -i '/else\ (\ move/ s,$,\n\tdir,' src/testdir/Make_mvc.mak

      - name: Test and show the result of testing Vim
        if: matrix.GUI == 'no' || matrix.VIMDLL == 'yes'
        shell: cmd
        timeout-minutes: 15
        run: |
          PATH %LUA_DIR%;C:\msys64\%MSYSTEM%\bin;%PATH%;%PYTHON3_DIR%;%SODIUM_LIB%
          call "%VCVARSALL%" %VCARCH%

          echo %COL_GREEN%Test Vim:%COL_RESET%
          cd src\testdir
          nmake -nologo -f Make_mvc.mak clean
          if "${{ matrix.GUI }}"=="no" (
            nmake -nologo -f Make_mvc.mak VIMPROG=..\vim || exit 1
          ) else (
            @rem Run only tiny tests.
            nmake -nologo -f Make_mvc.mak tiny VIMPROG=..\vim  || exit 1
          )

      - name: force exit
        shell: cmd
        run: |
          echo matrix build and show version seems ok
          echo try test
          exit 1

      - name: Generate gcov files
        if: matrix.coverage
        shell: msys2 {0}
        run: |
          cd src
          find . -type f -name '*.gcno' -exec gcov -pb {} + || true

      - name: Codecov
        timeout-minutes: 20
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          directory: src
          flags: windows,${{ matrix.toolchain }}-${{ matrix.arch }}-${{ matrix.features }}
          token: ${{ secrets.CODECOV_TOKEN }}
