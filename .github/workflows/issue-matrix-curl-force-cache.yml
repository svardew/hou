name: Force rebuild dependencies caches

on:
  workflow_dispatch:
    inputs:
      os:
        required: true
        type: choice
        desription: which os cache
        options: [Windows, noop]

permissions:
  contents: read # to fetch code (actions/checkout)
  actions: write # gh extension (actions/gh-actions-cache) delete cache

jobs:
  windows:
    if: ${{ github.event.inputs.os == 'Windows' }}
    runs-on: windows-2022
    env:
      # Interfaces
      # Lua
      LUA_VER: 54
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: 5.4.2
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      LUA_DIR: D:\Lua
      # do not want \L to end up in pathdef.c and compiler complaining about unknown escape sequences \l
      LUA_DIR_SLASH: D:/Lua
      # Python 2
      #-- PYTHON_VER: 27
      #-- PYTHON_VER_DOT: '2.7'
      #-- PYTHON_DIR: 'C:\Python27'
      # Python 3
      #-- PYTHON3_VER: 311
      #-- PYTHON3_VER_DOT: '3.11'
      # Other dependencies
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      # SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-msvc.zip
      SODIUM_MSVC_URL: https://github.com/jedisct1/libsodium/releases/download/%SODIUM_VER%-RELEASE/libsodium-%SODIUM_VER%-msvc.zip
      SODIUM_MSVC_VER: v143
      # SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-mingw.tar.gz
      SODIUM_MINGW_URL: https://github.com/jedisct1/libsodium/releases/download/%SODIUM_VER%-RELEASE/libsodium-%SODIUM_VER%-mingw.tar.gz
      SODIUM_MINGW_VER: 26
      # Escape sequences
      COL_RED: "\x1b[31m"
      COL_GREEN: "\x1b[32m"
      COL_YELLOW: "\x1b[33m"
      COL_RESET: "\x1b[m"
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include:
    #       - { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: no,  arch: x64, python3: stable }
    #       - { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: yes, arch: x86, python3: stable, coverage: yes }
    #       - { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: yes, arch: x86 }
    #       - { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: no,  arch: x64, coverage: yes }
    #       - { features: NORMAL, toolchain: msvc,  VIMDLL: yes, GUI: no,  arch: x86 }
    #       - { features: NORMAL, toolchain: mingw, VIMDLL: no,  GUI: yes, arch: x64 }
    #       - { features: TINY,   toolchain: msvc,  VIMDLL: yes, GUI: yes, arch: x64 }
    #       - { features: TINY,   toolchain: mingw, VIMDLL: no,  GUI: no,  arch: x86 }
    steps:
      - name: Initialize
        id: init
        shell: bash
        run: |
          #-- # Show Windows version
          #-- cmd /c ver
          git config --global core.autocrlf input
          TARGET_OS=${{ github.event.inputs.os }}
          echo "targetos=$TARGET_OS" >> $GITHUB_ENV
          gh extension install actions/gh-actions-cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: svardew/vim
      - name: Create a list of download URLs
        shell: cmd
        run: |
          type NUL > urls.txt
          echo %LUA_RELEASE%>> urls.txt
          echo %WINPTY_URL%>> urls.txt
          echo %SODIUM_VER%>> urls.txt
      ### matrix [x86, x64]
      # env.architecture == 'x86'
      - name: Setup github_env /${{ env.architecture }}
        shell: bash
        run: |
          echo "arch=${{ env.architecture }}" >> $GITHUB_ENV
          ky=${{ env.targetos }}-${{ env.architecture }}-${{ hashFiles('urls.txt') }}
          echo "restorekey=${ky}" >> $GITHUB_ENV
          echo "BITS=${{ env.BITS }}" >> $GITHUB_ENV
        env:
          architecture: x86
          BITS: 32
      - name: Restore cache files /${{ env.arch }}
        uses: actions/cache/restore@v4
        with:
          path: downloads
          key: ${{ env.restorekey }}
          enableCrossOsArchive: true
      - name: Download dependencies /${{ env.arch }}
        shell: cmd
        run: |
          path C:\Program Files\7-Zip;%path%
          if not exist downloads mkdir downloads

          echo %COL_GREEN%Download Lua%COL_RESET%
          call :downloadfile %LUA${{ env.BITS }}_URL% downloads\lua.zip

          echo %COL_GREEN%Download winpty%COL_RESET%
          call :downloadfile %WINPTY_URL% downloads\winpty.zip

          echo %COL_GREEN%Download libsodium msvc%COL_RESET%
          call :downloadfile %SODIUM_MSVC_URL% downloads\libsodium.zip

          echo %COL_GREEN%Download libsodium mingw%COL_RESET%
          call :downloadfile %SODIUM_MINGW_URL% downloads\libsodium.tar.gz

          goto :eof

          :downloadfile
          :: call :downloadfile <URL> <localfile>
          if exist %2 (
            echo skip download. file exist %2
          ) else (
            curl -f -L %1 -o %2
          )
          if ERRORLEVEL 1 (
            rem Retry once.
            curl -f -L %1 -o %2 || exit 1
          )
          goto :eof

      - name: Dir dependencies
        shell: cmd
        run: |
          dir downloads
      - name: Delete repository cache /${{ env.arch }}
        shell: bash {0}
        run: |
          if [ $(gh actions-cache list -R $REPO |cut -f1 |grep -c $KEY) ]; then
            gh actions-cache delete $KEY -R $REPO --confirm
            echo 'delete cachce: '$KEY >> $GITHUB_STEP_SUMMARY
          fi
        env:
          kEY: ${{ env.restorekey }}
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save repository cache /${{ env.arch }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          key: ${{ env.restorekey }}
          enableCrossOsArchive: true
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Clear restored files /${{ env.arch }}
        shell: cmd
        run: |
          if exist downloads rmdir /s /q downloads
      # env.architecture == 'x64'
      - name: Setup github_env /${{ env.architecture }}
        shell: bash
        run: |
          echo "arch=${{ env.architecture }}" >> $GITHUB_ENV
          ky=${{ env.targetos }}-${{ env.architecture }}-${{ hashFiles('urls.txt') }}
          echo "restorekey=${ky}" >> $GITHUB_ENV
          echo "BITS=${{ env.BITS }}" >> $GITHUB_ENV
        env:
          architecture: x64
          BITS: 64
      - name: Restore cache files /${{ env.arch }}
        uses: actions/cache/restore@v4
        with:
          path: downloads
          key: ${{ env.restorekey }}
          enableCrossOsArchive: true
      - name: Download dependencies /${{ env.arch }}
        shell: cmd
        run: |
          path C:\Program Files\7-Zip;%path%
          if not exist downloads mkdir downloads
          rem ///
          echo %COL_GREEN%Download Lua%COL_RESET%
          call :downloadfile %LUA${{ env.BITS }}_URL% downloads\lua.zip
          7z x downloads\lua.zip -o%LUA_DIR% > nul || exit 1
          echo %COL_GREEN%Download winpty%COL_RESET%
          call :downloadfile %WINPTY_URL% downloads\winpty.zip
          echo %COL_GREEN%Download libsodium msvc%COL_RESET%
          call :downloadfile %SODIUM_MSVC_URL% downloads\libsodium.zip
          echo %COL_GREEN%Download libsodium mingw%COL_RESET%
          call :downloadfile %SODIUM_MINGW_URL% downloads\libsodium.tar.gz
          goto :eof
          :downloadfile
          :: call :downloadfile <URL> <localfile>
          if exist %2 (
            echo skip download. file exist %2
          ) else (
            curl -f -L %1 -o %2
          )
          if ERRORLEVEL 1 (
            rem Retry once.
            curl -f -L %1 -o %2 || exit 1
          )
          goto :eof
      - name: Dir dependencies
        shell: cmd
        run: |
          dir downloads
      - name: Delete repository cache /${{ env.arch }}
        shell: bash {0}
        run: |
          if [ $(gh actions-cache list -R $REPO |cut -f1 |grep -c $KEY) ]; then
            gh actions-cache delete $KEY -R $REPO --confirm
            echo 'delete cachce: '$KEY >> $GITHUB_STEP_SUMMARY
          fi
        env:
          kEY: ${{ env.restorekey }}
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save repository cache /${{ env.arch }}
        uses: actions/cache/save@v4
        with:
          path: downloads
          key: ${{ env.restorekey }}
          enableCrossOsArchive: true
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Clear restored files /${{ env.arch }}
        shell: cmd
        run: |
          if exist downloads rmdir /s /q downloads
      # summary
      - name: List repository cache
        shell: bash {0}
        run: |
          echo '* cache list' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          gh actions-cache list -R $REPO >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


