name: Check cache daily

on:
  schedule:
    - cron: '24 15 * * *'  # Run once per day.
  workflow_dispatch:

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  windows:
    runs-on: ubuntu-22.04

    env:
      # Lua
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: '5.4.2'
      _LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      _LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      _SODIUM_MSVC_URL: https://github.com/jedisct1/libsodium/releases/download/%SODIUM_VER%-RELEASE/libsodium-%SODIUM_VER%-msvc.zip
      _SODIUM_MINGW_URL: https://github.com/jedisct1/libsodium/releases/download/%SODIUM_VER%-RELEASE/libsodium-%SODIUM_VER%-mingw.tar.gz

    permissions:
      actions: write # gh extension (actions/gh-actions-cache) delete cache
      contents: write

    steps:
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          path: vim

      - name: Set up environment
        id: env
        run: |
          test -d downloads || mkdir downloads
          test -d cache-${{ env.arc }} || mkdir cache-${{ env.arc }}
          gh extension install actions/gh-actions-cache
          # checksum
          touch MD5SUMS-${{ env.arc }}
          cat <<LINES > MD5SUMS-${{ env.arc }}
          25b07e2b5177a2f071f109f641f9e3e4  lua-5.4.2_Win32_dllw6_lib.zip
          132834e89206d893630410fa2192bd2a  lua-5.4.2_Win64_dllw6_lib.zip
          a0f941c53b8e509712eeca46104674c4  winpty-0.4.3-msvc2015.zip
          # 113f036c91f06a9fdb11186e3dce7d93  libsodium-1.0.19-stable-msvc.zip
          # 8867b0380daabd12ece3dbad73197e78  libsodium-1.0.19-stable-mingw.tar.gz
          2a0669a0596b7d8b8b2b9a775b479132  libsodium-1.0.19-mingw.tar.gz
          38db0856f7e3f9679f5e61c80632aac2  libsodium-1.0.19-msvc.zip
          LINES
          # url, filename
          u=${{ env._LUA32_URL }}; ver=${{ env.LUA_RELEASE }}
          u=${u/\%LUA_RELEASE\%/$ver}; f=${u/*luabinaries\//}
          echo "LUA32_URL=$u" >> $GITHUB_OUTPUT
          echo "LUA32_FILE=$f" >> $GITHUB_OUTPUT
          u=${{ env._LUA64_URL }}; ver=${{ env.LUA_RELEASE }}
          u=${u/\%LUA_RELEASE\%/$ver}; f=${u/*luabinaries\//}
          echo "LUA64_URL=$u" >> $GITHUB_OUTPUT
          echo "LUA64_FILE=$f" >> $GITHUB_OUTPUT
          u=${{ env.WINPTY_URL }}; f=${u/*\//}
          echo "WINPTY_URL=$u" >> $GITHUB_OUTPUT
          echo "WINPTY_FILE=$f" >> $GITHUB_OUTPUT
          u=${{ env._SODIUM_MSVC_URL }}; ver=${{ env.SODIUM_VER }}
          u=${u//\%SODIUM_VER\%/$ver}; f=${u/*-RELEASE\//}
          echo "SODIUM_MSVC_URL=$u" >> $GITHUB_OUTPUT
          echo "SODIUM_MSVC_FILE=$f" >> $GITHUB_OUTPUT
          u=${{ env._SODIUM_MINGW_URL }}; ver=${{ env.SODIUM_VER }}
          u=${u//\%SODIUM_VER\%/$ver}; f=${u/*-RELEASE\//}
          echo "SODIUM_MINGW_URL=$u" >> $GITHUB_OUTPUT
          echo "SODIUM_MINGW_FILE=$f" >> $GITHUB_OUTPUT
          echo "### SetupEnv :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          arc: all
          os: Windows
          GH_TOKEN: ${{ github.token }}

      - name: Create Keyfile
        run: |
          touch urls.txt && truncate --size 0 urls.txt
          echo ${{ env.LUA_RELEASE }} >> urls.txt
          echo ${{ env.WINPTY_URL }} >> urls.txt
          echo ${{ env.SODIUM_VER }} >> urls.txt
          sed -i 's/$/\r/g' urls.txt
          echo "### CreateKeyfile :rocket:" >> $GITHUB_STEP_SUMMARY

      # Arch all
      - name: ${{ env.arc }} / Restore Cache
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: downloads
          key: ${{ env.os }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          arc: all
          os: Windows
          REPO: ${{ github.repository }}

      - name: ${{ env.arc }} / Verify cache
        id: verifycache
        continue-on-error: true
        shell: bash {0}
        run: |
          find downloads -type f -exec cp \{\} ./cache-${{ env.arc }} \;
          cd ./cache-${{ env.arc }}
          md5sum -c ../MD5SUMS-${{ env.arc }}
          if [ $? -gt 0 ]; then
            echo "cache=invalid" >> $GITHUB_OUTPUT
          else
            echo "cache=valid" >> $GITHUB_OUTPUT
          fi
          echo "### VerifyCache :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          arc: all
          os: Windows

      - name: ${{ env.arc }} / Use current cache
        if: steps.verifycache.outputs.cache == 'valid'
        run: |
          echo "repository cache is fine."
          echo "KEY: ${{ env.os }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}"
          echo "### NotUpdateCache :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          arc: all
          os: Windows
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

      - name: ${{ env.arc }} / Download missing dependencies
        if: steps.verifycache.outputs.cache == 'invalid'
        run: |
          function dlf2 () {
            if [ ! -f "$2" ]
            then wget -nv --tries=2 --waitretry=10 -O $2 $1
            else echo Skip Downlaod. $2
            fi
          }
          cd cache-${{ env.arc }}
          dlf2 ${{ steps.env.outputs.LUA32_URL }} ${{ steps.env.outputs.LUA32_FILE }}
          dlf2 ${{ steps.env.outputs.LUA64_URL }} ${{ steps.env.outputs.LUA64_FILE }}
          dlf2 ${{ env.WINPTY_URL }} ${{ steps.env.outputs.WINPTY_FILE }}
          dlf2 ${{ steps.env.outputs.SODIUM_MSVC_URL }} ${{ steps.env.outputs.SODIUM_MSVC_FILE }}
          dlf2 ${{ steps.env.outputs.SODIUM_MINGW_URL }} ${{ steps.env.outputs.SODIUM_MINGW_FILE }}
          echo '// check md5sum'
          md5sum -c ../MD5SUMS-${{ env.arc }}
          cd ../
          find cache-${{ env.arc }} -type f -exec cp -vn \{\} ./downloads/ \;
          echo "### DownloadDeps :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          arc: all
          os: Windows

      - name: ${{ env.arc }} / Delete repository cache
        if: steps.verifycache.outputs.cache == 'invalid'
        run: |
          caches=$(gh actions-cache list -R ${{ env.REPO }} | cut -f1)
          restorekey=${{ env.os }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
          for ky in $caches
          do
            if [ "$ky" = "$restorekey" ]; then
              echo "repository cache exist. delete cache" $restorekey
              gh actions-cache delete $restorekey -R ${{ env.REPO }} --confirm
            fi
          done
          echo "### DeleteRepoCache :rocket:" >> $GITHUB_STEP_SUMMARY
        env:
          arc: all
          os: Windows
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

      - name: ${{ env.arc }} / Save cache
        if: steps.verifycache.outputs.cache == 'invalid'
        uses: actions/cache/save@v4
        with:
          path: downloads
          enableCrossOsArchive: true
          key: ${{ env.os }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          arc: all
          os: Windows
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

      - name: finish job
        run: |
          echo "### FinishJob :rocket:" >> $GITHUB_STEP_SUMMARY
          exit 0
