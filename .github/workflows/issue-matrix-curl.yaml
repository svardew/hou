name: Check dependeicies cache daily

on:
  # schedule:
    # - cron: '24 15 * * *'  # Run once per day.
  workflow_dispatch:
    inputs:
      checksum:
        required: false
        type: string
        desription: 'MD5SUMS csv one line'
        default: '9851c10632b2d9bbb261441be628d9b1  lisbn-0.3.1.tar.gz,8c061237261a00c307c82dd3880f19c1  lisbn-0.3.1.zip'

permissions:
  contents: read # to fetch code (actions/checkout)
  actions: write # gh extension (actions/gh-actions-cache) delete cache

jobs:
  wind2022:
    runs-on: windows-2022
    env:
      # Interfaces
      # Lua
      LUA_VER: 54
      LUA_VER_DOT: '5.4'
      LUA_RELEASE: 5.4.2
      LUA32_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win32_dllw6_lib.zip
      LUA64_URL: https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win64_dllw6_lib.zip
      LUA_DIR: D:\Lua
      # do not want \L to end up in pathdef.c and compiler complaining about unknown escape sequences \l
      LUA_DIR_SLASH: D:/Lua
      # Python 2
      PYTHON_VER: 27
      PYTHON_VER_DOT: '2.7'
      PYTHON_DIR: 'C:\Python27'
      # Python 3
      PYTHON3_VER: 311
      PYTHON3_VER_DOT: '3.11'
      # Other dependencies
      # winpty
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      # libsodium
      SODIUM_VER: '1.0.19'
      SODIUM_MSVC_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-msvc.zip
      SODIUM_MSVC_VER: v143
      SODIUM_MINGW_URL: https://download.libsodium.org/libsodium/releases/libsodium-%SODIUM_VER%-stable-mingw.tar.gz
      SODIUM_MINGW_VER: 26
      # Escape sequences
      COL_RED: "\x1b[31m"
      COL_GREEN: "\x1b[32m"
      COL_YELLOW: "\x1b[33m"
      COL_RESET: "\x1b[m"
    strategy:
      fail-fast: false
      matrix:
        include:
          - { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: no,  arch: x64, python3: stable }
          - { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: yes, arch: x86, python3: stable, coverage: yes }
          - { features: HUGE,   toolchain: msvc,  VIMDLL: no,  GUI: yes, arch: x86 }
          - { features: HUGE,   toolchain: mingw, VIMDLL: yes, GUI: no,  arch: x64, coverage: yes }
          - { features: NORMAL, toolchain: msvc,  VIMDLL: yes, GUI: no,  arch: x86 }
          - { features: NORMAL, toolchain: mingw, VIMDLL: no,  GUI: yes, arch: x64 }
          - { features: TINY,   toolchain: msvc,  VIMDLL: yes, GUI: yes, arch: x64 }
          - { features: TINY,   toolchain: mingw, VIMDLL: no,  GUI: no,  arch: x86 }
    steps:
      - name: Initialize
        id: init
        shell: bash
        run: |
          #-- # Show Windows version
          #-- cmd /c ver
          git config --global core.autocrlf input
          if ${{ matrix.arch == 'x64' }}; then
            cygreg=registry
            pyreg=
            echo "VCARCH=amd64" >> $GITHUB_ENV
            echo "WARCH=x64" >> $GITHUB_ENV
            echo "BITS=64" >> $GITHUB_ENV
            echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
          else
            cygreg=registry32
            pyreg=-32
            echo "VCARCH=x86" >> $GITHUB_ENV
            echo "WARCH=ia32" >> $GITHUB_ENV
            echo "BITS=32" >> $GITHUB_ENV
            echo "MSYSTEM=MINGW32" >> $GITHUB_ENV
          fi
          echo "VCVARSALL=$(vswhere -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          # omit python2 and python3
      - uses: msys2/setup-msys2@v2
        if: matrix.toolchain == 'mingw'
        with:
          update: true
          install: tar
          pacboy: >-
            make:p gcc:p
          msystem: ${{ env.MSYSTEM }}
          release: false
      - name: Checkout repository from github
        uses: actions/checkout@v4
        with:
          repository: svardew/vim
          path: vim
      - name: Create a list of download URLs
        shell: cmd
        run: |
          type NUL > urls.txt
          echo %LUA_RELEASE%>> urls.txt
          echo %WINPTY_URL%>> urls.txt
          echo %SODIUM_VER%>> urls.txt
      - name: Cache downloaded files
        uses: actions/cache@v4
        with:
          path: downloads
          key: ${{ runner.os }}-${{ matrix.arch }}-${{ hashFiles('urls.txt') }}
      - name: Download dependencies
        shell: cmd
        run: |
          path C:\Program Files\7-Zip;%path%
          if not exist downloads mkdir downloads
          echo %COL_GREEN%Download Lua%COL_RESET%
          call :downloadfile %LUA${{ env.BITS }}_URL% downloads\lua.zip
          7z x downloads\lua.zip -o%LUA_DIR% > nul || exit 1

          echo %COL_GREEN%Download winpty%COL_RESET%
          call :downloadfile %WINPTY_URL% downloads\winpty.zip
          7z x -y downloads\winpty.zip -oD:\winpty > nul || exit 1
          copy /Y D:\winpty\%WARCH%\bin\winpty.dll        src\winpty%BITS%.dll
          copy /Y D:\winpty\%WARCH%\bin\winpty-agent.exe  src\

          echo %COL_GREEN%Download libsodium%COL_RESET%
          if "${{ matrix.toolchain }}"=="msvc" (
            call :downloadfile %SODIUM_MSVC_URL% downloads\libsodium.zip
            7z x -y downloads\libsodium.zip -oD:\ > nul || exit 1
          ) else (
            call :downloadfile %SODIUM_MINGW_URL% downloads\libsodium.tar.gz
            7z x -y downloads\libsodium.tar.gz -so | 7z x -si -ttar -oD:\ > nul || exit 1
            mklink %SODIUM_LIB%\libsodium.dll %SODIUM_LIB%\libsodium-%SODIUM_MINGW_VER%.dll
          )

          goto :eof

          :downloadfile
          :: call :downloadfile <URL> <localfile>
          if exist %2 (
            echo skip download. file exist %2
          )
          if not exist %2 (
            curl -f -L %1 -o %2
          )
          if ERRORLEVEL 1 (
            rem Retry once.
            curl -f -L %1 -o %2 || exit 1
          )
          goto :eof

      - name: Download dependencies
        shell: cmd
        run: |
          dir downloads

  windows:
    if: false
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        numbers: [one, two, three, four, five]
        seasons: [spring, summer, autumn, winter]

    env:
      LUA_RELEASE: '5.4.2'
      WINPTY_URL: https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip
      SODIUM_VER: '1.0.19'
      TARGET_OS: Windows
      REPO_VIM: svardew/vim
      # dependencies.
      LISBN_ZIP_URL: https://github.com/svardew/lisbn/archive/refs/tags/v0.3.1.zip
      LISBN_TAR_URL: https://github.com/svardew/lisbn/archive/refs/tags/v0.3.1.tar.gz
      LISBN_ZIP_SAVEAS: lisbn-0.3.1.zip
      LISBN_TAR_SAVEAS: lisbn-0.3.1.tar.gz

    steps:
      - uses: actions/checkout@v4
        with:
          path: vim
          repository: ${{ env.REPO_VIM }}

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0

      - name: Set up environment
        if: false
        run: |
          test -d downloads || mkdir downloads
          touch urls.txt && truncate --size 0 urls.txt
          gh extension install actions/gh-actions-cache
          # checksum
          checksum=MD5SUMS-${{ env.arc }}
          touch $checksum
          echo ${{ env.MD5SUMS_CSV }} > $checksum
          sed -i 's/,\s*/\n/g' $checksum
          # checkif
          echo '/* $checksum */'
          cat $checksum
          echo '/* ls downloads */'
          ls downloads
        env:
          arc: any
          GH_TOKEN: ${{ github.token }}
          MD5SUMS_CSV: ${{ inputs.checksum }}

      - name: Create Keyfile
        if: false
        run: |
          echo ${{ env.LUA_RELEASE }} > urls.txt
          echo ${{ env.WINPTY_URL }} >> urls.txt
          echo ${{ env.SODIUM_VER }} >> urls.txt
          sed -i 's/$/\r/g' urls.txt
          # checkif
          echo '/* filetype urls.txt */'
          file urls.txt
          echo '/* urls.txt */'
          cat urls.txt

      - name: Restore Cache
        if: false
        uses: actions/cache/restore@v4
        with:
          enableCrossOsArchive: true
          path: downloads
          key: ${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
        env:
          arc: any
          REPO: ${{ github.repository }}

      - name: Verify cache
        if: false
        id: verifycache
        continue-on-error: true
        shell: bash {0}
        run: |
          cachedir=cache-${{ env.arc }}
          checksum=MD5SUMS-${{ env.arc }}
          test -d $cachedir  && rm -rf $cachedir
          test -d $cachedir  || mkdir $cachedir
          find downloads -type f -exec cp \{\} $cachedir \;
          cd $cachedir
          md5sum -c ../$checksum
          flag=$?
          if [ $flag -gt 0 ]; then
            echo "cache=invalid" >> $GITHUB_OUTPUT
          else
            echo "cache=valid" >> $GITHUB_OUTPUT
          fi
          cd ../
          # checkif
          echo '/* ls downloads */'
          ls -lagG downloads
          echo '/* ls $cachedir */'
          ls -lagG $cachedir
          echo '/* $checksum */'
          cat $checksum
          echo '/* md5sum result */'
          echo 'md5sum return: [' $flag ']'
        env:
          arc: any

      # - name: Use current cache
      #   if: steps.verifycache.outputs.cache == 'valid'
      #   run: |
      #     echo "repository cache is fine."
      #     echo "KEY: ${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}"
      #   env:
      #     arc: any

      # - name: Update cache (1/3). Delete repository cache
      #   if: steps.verifycache.outputs.cache == 'invalid'
      #   run: |
      #     echo "repository cache is not fine."
      #     echo "KEY: ${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}"
      #     echo "[regenerate cache] first, delete cache"
      #     caches=$(gh actions-cache list -R ${{ env.REPO }} | cut -f1)
      #     restorekey=${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
      #     for ky in $caches
      #     do
      #       if [ "$ky" = "$restorekey" ]; then
      #         echo "* delete repository cache:" $restorekey
      #         gh actions-cache delete $restorekey -R ${{ env.REPO }} --confirm
      #       fi
      #     done
      #     # checkif
      #     echo '/* target KEY */'
      #     echo ${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
      #     echo '/* list repository caches */'
      #     gh actions-cache list -R ${{ env.REPO }}
      #   env:
      #     arc: any
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPO: ${{ github.repository }}

      # - name: Update cache (2/3). Download missing dependencies
      #   if: steps.verifycache.outputs.cache == 'invalid'
      #   run: |
      #     echo "[regenerate cache] next, download dependencies."
      #     cachedir=cache-${{ env.arc }}
      #     checksum=MD5SUMS-${{ env.arc }}
      #     function dlf2 () {
      #       if [ ! -f "$2" ]
      #       then wget --no-verbose --tries=2 --waitretry=10 --output-document=$2 $1
      #       else echo 'Skip Downlaod. file eixst:' $2
      #       fi
      #     }
      #     cd $cachedir
      #     dlf2 ${{ env.LISBN_ZIP_URL }} ${{ env.LISBN_ZIP_SAVEAS }}
      #     dlf2 ${{ env.LISBN_TAR_URL }} ${{ env.LISBN_TAR_SAVEAS }}
      #     echo '// check md5sum'
      #     md5sum -c ../$checksum
      #     cd ../
      #     find $cachedir -type f -exec cp -vn \{\} ./downloads/ \;
      #     # checkif
      #     echo "/* $cachedir */"
      #     ls -lagGp $cachedir
      #     echo "/* downloads */"
      #     ls -lagGp downloads
      #   env:
      #     arc: any

      # - name: Update cache (3/3). Save cache
      #   if: steps.verifycache.outputs.cache == 'invalid'
      #   uses: actions/cache/save@v4
      #   with:
      #     path: downloads
      #     enableCrossOsArchive: true
      #     key: ${{ env.TARGET_OS }}-${{ env.arc }}-${{ hashFiles('urls.txt') }}
      #   env:
      #     arc: any
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPO: ${{ github.repository }}

      - name: download
        shell: bash {0}
        run: |
          test -d downloads || mkdir downloads
          function dlf2 () {
            if [ ! -f "$2" ]
            then wget --no-verbose --tries=2 --waitretry=10 --output-document=$2 $1
            else echo 'Skip Downlaod. file eixst:' $2
            fi
          }
          cd downloads
          dlf2 ${{ env.LISBN_ZIP_URL }} ${{ env.LISBN_ZIP_SAVEAS }}
          dlf2 ${{ env.LISBN_TAR_URL }} ${{ env.LISBN_TAR_SAVEAS }}
          echo '~ checksum ~' ${{ matrix.numbers }}-${{ matrix.seasons }} >> $GITHUB_STEP_SUMMARY
          md5sum * >> $GITHUB_STEP_SUMMARY
          echo '~ setup-ruby ~' ${{ matrix.numbers }}-${{ matrix.seasons }} >> $GITHUB_STEP_SUMMARY
          which ruby >> $GITHUB_STEP_SUMMARY
          ruby -v >> $GITHUB_STEP_SUMMARY

      - name: summary
        if: false
        shell: bash {0}
        run: |
          touch summary_log
          cachedir=cache-${{ env.arc }}
          checksum=MD5SUMS-${{ env.arc }}
          echo '---' >> summary_log
          echo '[cwd]:' >> summary_log
          ls -lagGp1 . >> summary_log
          echo '[cachedir]:' $cachedir >> summary_log
          ls -lagGp $cachedir >> summary_log
          echo '[downloads]:' >> summary_log
          ls -lagGp downloads >> summary_log
          echo '---' >> summary_log
          echo '/* check md5sum in dowloads */' >> summary_log
          cd downloads; md5sum -c ../$checksum  >> ../summary_log; cd ../
          echo '---' >> summary_log
          echo '/* env */' >> summary_log
          env >> summary_log
          echo '---' >> summary_log
          echo '/* cache in repository */' >> summary_log
          gh actions-cache list -R ${{ github.repository }} >> summary_log
          echo '/* runner-os: ubuntu, ruby, vim */' >> summary_log
          uname -a >> summary_log
          which ruby >> summary_log
          ruby -v >> summary_log
          which vim >> summary_log
          vim --version >> summary_log
          # step summary
          echo '# summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat summary_log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        env:
          arc: any
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}

